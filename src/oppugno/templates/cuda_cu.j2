#include <stdio.h>
#include <iostream>
using namespace std;

__global__ void 
{{ kernel.name }}_kernel(
    {% for dim in kernel.dims %}
    int x{{ loop.index0 }},
    {% endfor %}
    {% for input in kernel.inputs %}
    {{ input.type }} {{ input.name }},
    {% endfor %}
    {% for output in kernel.outputs %}
    {{ output.type }} {{ output.name }},
    {% endfor %}
    {% for param in kernel.params %}
    {{ param.type }} {{ param.name }},
    {% endfor %}
    ) {
    int index = blockIdx.x * blockDim.x + threadIdx.x;

    if (index >= x0) return;
    for (int i = 0; i < x0; i++) {
        result[index] = alpha * x[index] + y[index];
    }
}

bool {{ cuda.name }}_cuda({% for dim in cuda.dims %}int x{{ loop.index0 }}, {% endfor %}{% for input in cuda.inputs %}{{ input.type }} {{ input.name }}, {% endfor %}{% for output in cuda.outputs %}{{ output.type }} {{ output.name }}{% if not loop.last %}, {% endif %}{% endfor %}{% for param in cuda.params %}, {{ param.type }} {{ param.name }}{% endfor %}) {

    

}